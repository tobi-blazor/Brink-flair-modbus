bme68x_bsec2_i2c:
  model: bme688
  state_save_interval: 6h # The minimum interval at which to save the calibrated BSEC2 algorithm state to flash so that calibration doesn’t have to start from scratch on device restart. Defaults to 6h.
  address: 0x77
  operating_age: 28d # The history BSEC2 considers for the automatic background calibration of the IAQ in days. That means changes in this time period will influence the IAQ value. Either 4d or 28d.
  sample_rate: lp # Sample rate. Default is LP for low power consumption, sampling every 3 seconds. Can be ULP for ultra-low power, sampling every 5 minutes. This controls the sampling rate for gas-dependent sensors and will govern the interval at which the sensor heater is operated. By default, this rate will also be used for temperature, humidity and pressure sensors but can be overridden per-sensor if required.

sensor:
  - platform: bme68x_bsec2
    temperature:
      name: "Abluft ENV-Pro Temperatur"
      filters:
        - median
    pressure:
      name: "Abluft ENV-Pro Druck"
      filters:
        - median
    humidity:
      name: "Abluft ENV-Pro Luftfeuchtigkeit"
      filters:
        - median
    iaq:
      name: "Abluft IAQ"
      id: iaq
      filters:
        - median
      on_value:
        - component.update: iaq_classification
    iaq_static:
      name: "Abluft Static IAQ"
      id: static_iaq
      filters:
        - median
      on_value:
        - component.update: static_iaq_classification
    co2_equivalent:
      name: "Abluft CO2 equivalent"
      filters:
        - median
    breath_voc_equivalent:
      name: "Abluft Breath VOC equivalent"
      filters:
        - median
    gas_resistance:
      # Gas resistance in Ω
      name: "Abluft Gas resistance"
      filters:
        - median

text_sensor:
  - platform: template
    name: "Abluft IAQ classification"
    id: iaq_classification
    icon: "mdi:checkbox-marked-circle-outline"
    lambda: |-
      auto iaq_ = int(id(iaq).state);
      if (iaq_ < 0) {
        // No IAQ sensor.
        return {"unknown"};
      }
      if (iaq_ <= 50) {
        return {"excellent"};
      }
      else if (iaq_ <= 100) {
        return {"good"};
      }
      else if (iaq_ <= 150) {
        return {"lightly polluted"};
      }
      else if (iaq_ <= 200) {
        return {"moderately polluted"};
      }
      else if (iaq_ <= 250) {
        return {"heavily polluted"};
      }
      else if (iaq_ <= 350) {
        return {"severely polluted"};
      }
      else if (iaq_ <= 500) {
        return {"extremely polluted"};
      }
      else {
        // ESP_LOGD("iaq-classification", "IAQ not yet established: %s", id(static_iaq).state);
        return {"unknown"};
      }
    update_interval: never

  - platform: template
    name: "Abluft Static IAQ classification"
    id: static_iaq_classification
    icon: "mdi:checkbox-marked-circle-outline"
    lambda: |-
      auto iaq_ = int(id(static_iaq).state);
      if (iaq_ < 0) {
        // No IAQ sensor.
        return {"unknown"};
      }
      if (iaq_ <= 50) {
        return {"excellent"};
      }
      else if (iaq_ <= 100) {
        return {"good"};
      }
      else if (iaq_ <= 150) {
        return {"lightly polluted"};
      }
      else if (iaq_ <= 200) {
        return {"moderately polluted"};
      }
      else if (iaq_ <= 250) {
        return {"heavily polluted"};
      }
      else if (iaq_ <= 350) {
        return {"severely polluted"};
      }
      else if (iaq_ <= 500) {
        return {"extremely polluted"};
      }
      else {
        // ESP_LOGD("iaq-classification", "IAQ not yet established: %s", id(static_iaq).state);
        return {"unknown"};
      }
    update_interval: never
  - platform: bme68x_bsec2
    iaq_accuracy:
      name: "Abluft IAQ accuracy"
